/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MarkdownConverterPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var MarkdownConverterPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.noteTypes = {
      "NOTE": { class: "info", icon: "\u{1F4DD}" },
      "TIP": { class: "tip", icon: "\u{1F4A1}" },
      "WARNING": { class: "warning", icon: "\u26A0\uFE0F" },
      "DANGER": { class: "danger", icon: "\u{1F6A8}" },
      "INFO": { class: "info", icon: "\u2139\uFE0F" },
      "EXAMPLE": { class: "example", icon: "\u{1F4CB}" },
      "QUOTE": { class: "quote", icon: "\u{1F4AC}" }
    };
  }
  async onload() {
    console.log("Loading Obsidian to Hexo Converter Plugin");
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        if (file.extension === "md") {
          menu.addItem((item) => {
            item.setTitle("\u{1F504} \u8F6C\u6362\u4E3AHexo\u683C\u5F0F").setIcon("file-text").onClick(async () => {
              await this.convertFile(file);
            });
          });
        }
      })
    );
    this.addCommand({
      id: "convert-current-file",
      name: "\u8F6C\u6362\u5F53\u524D\u6587\u4EF6\u4E3AHexo\u683C\u5F0F",
      checkCallback: (checking) => {
        const activeFile = this.app.workspace.getActiveFile();
        if (activeFile && activeFile.extension === "md") {
          if (!checking) {
            this.convertFile(activeFile);
          }
          return true;
        }
        return false;
      }
    });
    this.addCommand({
      id: "convert-all-files",
      name: "\u6279\u91CF\u8F6C\u6362\u5F53\u524D\u6587\u4EF6\u5939\u7684\u6240\u6709MD\u6587\u4EF6",
      callback: async () => {
        await this.convertAllFiles();
      }
    });
  }
  async convertFile(file) {
    try {
      new import_obsidian.Notice("\u5F00\u59CB\u8F6C\u6362\u6587\u4EF6...");
      const content = await this.app.vault.read(file);
      let convertedContent = this.convertInternalLinks(content);
      convertedContent = this.convertCrossDocumentLinks(convertedContent);
      convertedContent = this.convertImages(convertedContent);
      convertedContent = this.convertNoteCards(convertedContent);
      const hexoContent = this.addHexoFrontMatter(file.basename, convertedContent);
      const newFileName = `${file.basename}_converted.md`;
      const newFilePath = file.parent ? `${file.parent.path}/${newFileName}` : newFileName;
      const existingFile = this.app.vault.getAbstractFileByPath(newFilePath);
      if (existingFile) {
        await this.app.vault.delete(existingFile);
      }
      await this.app.vault.create(newFilePath, hexoContent);
      new import_obsidian.Notice(`\u2705 \u8F6C\u6362\u5B8C\u6210\uFF1A${newFileName}`);
    } catch (error) {
      new import_obsidian.Notice(`\u274C \u8F6C\u6362\u5931\u8D25\uFF1A${error.message}`);
      console.error("\u8F6C\u6362\u9519\u8BEF:", error);
    }
  }
  async convertAllFiles() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      new import_obsidian.Notice("\u8BF7\u5148\u6253\u5F00\u4E00\u4E2A\u6587\u4EF6");
      return;
    }
    const folder = activeFile.parent;
    if (!folder) {
      new import_obsidian.Notice("\u65E0\u6CD5\u786E\u5B9A\u5F53\u524D\u6587\u4EF6\u5939");
      return;
    }
    const mdFiles = folder.children.filter(
      (file) => file instanceof import_obsidian.TFile && file.extension === "md" && !file.name.includes("_converted")
    );
    if (mdFiles.length === 0) {
      new import_obsidian.Notice("\u5F53\u524D\u6587\u4EF6\u5939\u4E2D\u6CA1\u6709\u627E\u5230MD\u6587\u4EF6");
      return;
    }
    new import_obsidian.Notice(`\u5F00\u59CB\u6279\u91CF\u8F6C\u6362 ${mdFiles.length} \u4E2A\u6587\u4EF6...`);
    let successCount = 0;
    for (const file of mdFiles) {
      try {
        await this.convertFile(file);
        successCount++;
      } catch (error) {
        console.error(`\u8F6C\u6362\u6587\u4EF6 ${file.name} \u5931\u8D25:`, error);
      }
    }
    new import_obsidian.Notice(`\u2705 \u6279\u91CF\u8F6C\u6362\u5B8C\u6210\uFF01\u6210\u529F\u8F6C\u6362 ${successCount}/${mdFiles.length} \u4E2A\u6587\u4EF6`);
  }
  convertInternalLinks(content) {
    const generateAnchor = (title) => {
      return title.replace(/\s+/g, "-").replace(/[^\w\u4e00-\u9fff-]/g, "").toLowerCase();
    };
    content = content.replace(/\[\[#([^|\]]+)\|([^\]]+)\]\]/g, (match, title, displayText) => {
      const anchor = generateAnchor(title);
      return `[${displayText}](#${anchor})`;
    });
    content = content.replace(/\[\[#([^\]]+)\]\]/g, (match, title) => {
      const anchor = generateAnchor(title);
      return `[${title}](#${anchor})`;
    });
    return content;
  }
  convertCrossDocumentLinks(content) {
    content = content.replace(/\[\[([^#|\]]+)\|([^\]]+)\]\]/g, "[$2]($1.md)");
    content = content.replace(/\[\[([^#\]]+)\]\]/g, "[$1]($1.md)");
    return content;
  }
  convertImages(content) {
    content = content.replace(/!\[\[([^\]]+)\]\]/g, "![$1]($1)");
    content = content.replace(/\.(png|jpg|jpeg|gif|webp)\.md\)/g, ".$1)");
    return content;
  }
  convertNoteCards(content) {
    const lines = content.split("\n");
    const resultLines = [];
    let i = 0;
    while (i < lines.length) {
      const line = lines[i];
      const noteMatch = line.match(/^>\s*\[!([A-Z]+)\]\s*(.*)/);
      if (noteMatch) {
        const noteType = noteMatch[1];
        const noteTitle = noteMatch[2].trim() || noteType;
        const noteConfig = this.noteTypes[noteType] || { class: "info", icon: "\u{1F4DD}" };
        const noteContent = [];
        i++;
        while (i < lines.length && lines[i].startsWith(">")) {
          const contentLine = lines[i].substring(1).trim();
          if (contentLine) {
            noteContent.push(contentLine);
          }
          i++;
        }
        const htmlNote = this.generateNoteHtml(noteConfig.class, noteConfig.icon, noteTitle, noteContent);
        resultLines.push(htmlNote);
        i--;
      } else {
        resultLines.push(line);
      }
      i++;
    }
    return resultLines.join("\n");
  }
  generateNoteHtml(cssClass, icon, title, contentLines) {
    const contentHtml = contentLines.map((line) => {
      const imgMatch = line.match(/^!\[([^\]]*)\]\(([^\)]+)\)$/);
      if (imgMatch) {
        const altText = imgMatch[1];
        const imgUrl = imgMatch[2];
        return `  <img src="${imgUrl}" alt="${altText}" style="max-width: 100%; height: auto; border-radius: 4px; margin: 0.5em 0;" />`;
      } else {
        return `  <p>${line}</p>`;
      }
    }).join("\n");
    return `<div class="note note-${cssClass}">
      <div class="note-title">
        <span class="note-icon">${icon}</span>
        <span class="note-text">${title}</span>
      </div>
      <div class="note-content">
    ${contentHtml}
      </div>
    </div>`;
  }
  addHexoFrontMatter(title, content) {
    const currentDate = new Date().toISOString().slice(0, 19).replace("T", " ");
    const css = this.getCyberpunkCSS();
    return `---
title: ${title}
date: ${currentDate}
tags: []
categories: []
---

${css}

${content}`;
  }
  getCyberpunkCSS() {
    return `<style>
@import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&display=swap');

.note {
  margin: 1.5em 0;
  padding: 1.2em;
  border: 2px solid;
  border-radius: 8px;
  background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);
  box-shadow: 0 0 20px rgba(0, 255, 255, 0.3), inset 0 0 20px rgba(0, 0, 0, 0.5);
  font-family: 'Orbitron', monospace;
  position: relative;
  overflow: hidden;
}

.note::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(0, 255, 255, 0.1), transparent);
  animation: scan 3s infinite;
}

@keyframes scan {
  0% { left: -100%; }
  100% { left: 100%; }
}

.note-info {
  border-color: #00ffff;
  color: #00ffff;
  text-shadow: 0 0 10px #00ffff;
}

.note-tip {
  border-color: #39ff14;
  color: #39ff14;
  text-shadow: 0 0 10px #39ff14;
}

.note-warning {
  border-color: #ffff00;
  color: #ffff00;
  text-shadow: 0 0 10px #ffff00;
}

.note-danger {
  border-color: #ff073a;
  color: #ff073a;
  text-shadow: 0 0 10px #ff073a;
}

.note-example {
  border-color: #ff00ff;
  color: #ff00ff;
  text-shadow: 0 0 10px #ff00ff;
}

.note-quote {
  border-color: #9d4edd;
  color: #9d4edd;
  text-shadow: 0 0 10px #9d4edd;
}

.note-title {
  font-weight: 900;
  font-size: 1.1em;
  margin-bottom: 0.8em;
  display: flex;
  align-items: center;
  text-transform: uppercase;
  letter-spacing: 2px;
  border-bottom: 1px solid currentColor;
  padding-bottom: 0.5em;
  position: relative;
  z-index: 1;
}

.note-icon {
  margin-right: 0.8em;
  font-size: 1.2em;
  filter: drop-shadow(0 0 5px currentColor);
}

.note-text {
  position: relative;
}

.note-content {
  position: relative;
  z-index: 1;
}

.note-content p {
  margin: 0.8em 0;
  line-height: 1.6;
  font-weight: 400;
  background: rgba(0, 0, 0, 0.3);
  padding: 0.5em;
  border-radius: 4px;
  border-left: 3px solid currentColor;
}

.note-content p:first-child {
  margin-top: 0;
}

.note-content p:last-child {
  margin-bottom: 0;
}

.note-title::after {
  content: '';
  position: absolute;
  right: 0;
  top: 50%;
  transform: translateY(-50%);
  width: 8px;
  height: 8px;
  background: currentColor;
  border-radius: 50%;
  animation: blink 1.5s infinite;
}

@keyframes blink {
  0%, 50% { opacity: 1; }
  51%, 100% { opacity: 0; }
}

.note:hover {
  transform: translateY(-2px);
  box-shadow: 0 0 30px rgba(0, 255, 255, 0.5), inset 0 0 30px rgba(0, 0, 0, 0.7);
  transition: all 0.3s ease;
}

.note:hover .note-title {
  animation: glitch 0.5s infinite;
}

@keyframes glitch {
  0% { transform: translateX(0); }
  10% { transform: translateX(-2px); }
  20% { transform: translateX(2px); }
  30% { transform: translateX(-1px); }
  40% { transform: translateX(1px); }
  50% { transform: translateX(0); }
  100% { transform: translateX(0); }
}

@media (max-width: 768px) {
  .note {
    margin: 1em 0;
    padding: 1em;
  }
  
  .note-title {
    font-size: 1em;
    letter-spacing: 1px;
  }
}
</style>`;
  }
  onunload() {
    console.log("Unloading Obsidian to Hexo Converter Plugin");
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
//# sourceMappingURL=data:application/json;base64,
